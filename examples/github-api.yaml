openapi: "3.0.0"
info:
  title: "GitHub API (Subset)"
  version: "3.0.0"
  description: "A subset of GitHub's REST API for repository management"
  termsOfService: "https://docs.github.com/articles/github-terms-of-service"
  contact:
    name: "GitHub Support"
    url: "https://support.github.com/contact"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "https://api.github.com"
    description: "GitHub API v3"

security:
  - bearerAuth: []

paths:
  /user:
    get:
      summary: "Get the authenticated user"
      description: "Get information about the currently authenticated user"
      operationId: "getAuthenticatedUser"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Authentication required"
        "403":
          description: "Forbidden"

  /user/repos:
    get:
      summary: "List repositories for the authenticated user"
      description: "List repositories that are accessible to the authenticated user"
      operationId: "listUserRepos"
      parameters:
        - name: "type"
          in: "query"
          description: "Limit results to repositories of this type"
          required: false
          schema:
            type: "string"
            enum: ["all", "owner", "public", "private", "member"]
            default: "owner"
        - name: "sort"
          in: "query"
          description: "The property to sort the results by"
          required: false
          schema:
            type: "string"
            enum: ["created", "updated", "pushed", "full_name"]
            default: "full_name"
        - name: "direction"
          in: "query"
          description: "The order to sort by"
          required: false
          schema:
            type: "string"
            enum: ["asc", "desc"]
            default: "asc"
        - name: "per_page"
          in: "query"
          description: "The number of results per page (max 100)"
          required: false
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 30
        - name: "page"
          in: "query"
          description: "Page number of the results to fetch"
          required: false
          schema:
            type: "integer"
            minimum: 1
            default: 1
      responses:
        "200":
          description: "List of repositories"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Repository"

    post:
      summary: "Create a repository for the authenticated user"
      description: "Create a new repository for the authenticated user"
      operationId: "createUserRepo"
      requestBody:
        description: "Repository creation parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRepoRequest"
      responses:
        "201":
          description: "Repository created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        "400":
          description: "Bad request"
        "422":
          description: "Validation failed"

  /repos/{owner}/{repo}:
    get:
      summary: "Get a repository"
      description: "Get information about a specific repository"
      operationId: "getRepository"
      parameters:
        - name: "owner"
          in: "path"
          description: "The account owner of the repository"
          required: true
          schema:
            type: "string"
        - name: "repo"
          in: "path"
          description: "The name of the repository"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Repository information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        "404":
          description: "Repository not found"

    patch:
      summary: "Update a repository"
      description: "Update information about a repository"
      operationId: "updateRepository"
      parameters:
        - name: "owner"
          in: "path"
          description: "The account owner of the repository"
          required: true
          schema:
            type: "string"
        - name: "repo"
          in: "path"
          description: "The name of the repository"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Repository update parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRepoRequest"
      responses:
        "200":
          description: "Repository updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"

  /repos/{owner}/{repo}/issues:
    get:
      summary: "List repository issues"
      description: "List issues in a repository"
      operationId: "listRepoIssues"
      parameters:
        - name: "owner"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "repo"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "state"
          in: "query"
          description: "Issue state"
          required: false
          schema:
            type: "string"
            enum: ["open", "closed", "all"]
            default: "open"
        - name: "labels"
          in: "query"
          description: "A list of comma separated label names"
          required: false
          schema:
            type: "string"
        - name: "assignee"
          in: "query"
          description: "Username of the assignee"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "List of issues"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Issue"

    post:
      summary: "Create an issue"
      description: "Create a new issue in a repository"
      operationId: "createIssue"
      parameters:
        - name: "owner"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "repo"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Issue creation parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueRequest"
      responses:
        "201":
          description: "Issue created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"

components:
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      description: "GitHub personal access token"

  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        login:
          type: "string"
          example: "octocat"
        name:
          type: "string"
          example: "The Octocat"
        email:
          type: "string"
          format: "email"
          example: "octocat@github.com"
        bio:
          type: "string"
          example: "There once was..."
        company:
          type: "string"
          example: "GitHub"
        location:
          type: "string"
          example: "San Francisco"
        public_repos:
          type: "integer"
          example: 2
        followers:
          type: "integer"
          example: 20
        following:
          type: "integer"
          example: 0
        created_at:
          type: "string"
          format: "date-time"
          example: "2008-01-14T04:33:35Z"

    Repository:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1296269
        name:
          type: "string"
          example: "Hello-World"
        full_name:
          type: "string"
          example: "octocat/Hello-World"
        description:
          type: "string"
          example: "This your first repo!"
        private:
          type: "boolean"
          example: false
        html_url:
          type: "string"
          format: "uri"
          example: "https://github.com/octocat/Hello-World"
        clone_url:
          type: "string"
          format: "uri"
          example: "https://github.com/octocat/Hello-World.git"
        default_branch:
          type: "string"
          example: "main"
        language:
          type: "string"
          example: "C"
        stargazers_count:
          type: "integer"
          example: 80
        forks_count:
          type: "integer"
          example: 9
        open_issues_count:
          type: "integer"
          example: 0
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"
        pushed_at:
          type: "string"
          format: "date-time"

    CreateRepoRequest:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          description: "The name of the repository"
          example: "Hello-World"
        description:
          type: "string"
          description: "A short description of the repository"
          example: "This is your first repository"
        private:
          type: "boolean"
          description: "Whether the repository is private"
          default: false
        auto_init:
          type: "boolean"
          description: "Pass true to create an initial commit with empty README"
          default: false
        gitignore_template:
          type: "string"
          description: "Desired language or platform .gitignore template"
          example: "Haskell"

    UpdateRepoRequest:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the repository"
        description:
          type: "string"
          description: "A short description of the repository"
        private:
          type: "boolean"
          description: "Whether the repository is private"
        default_branch:
          type: "string"
          description: "Update the default branch for this repository"

    Issue:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        number:
          type: "integer"
          example: 1347
        title:
          type: "string"
          example: "Found a bug"
        body:
          type: "string"
          example: "I'm having a problem with this."
        state:
          type: "string"
          enum: ["open", "closed"]
          example: "open"
        labels:
          type: "array"
          items:
            type: "object"
            properties:
              name:
                type: "string"
                example: "bug"
              color:
                type: "string"
                example: "f29513"
        assignee:
          $ref: "#/components/schemas/User"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"
        html_url:
          type: "string"
          format: "uri"
          example: "https://github.com/octocat/Hello-World/issues/1347"

    CreateIssueRequest:
      type: "object"
      required:
        - "title"
      properties:
        title:
          type: "string"
          description: "The title of the issue"
          example: "Found a bug"
        body:
          type: "string"
          description: "The contents of the issue"
          example: "I'm having a problem with this."
        assignee:
          type: "string"
          description: "Login for the user that this issue should be assigned to"
        labels:
          type: "array"
          description: "Labels to associate with this issue"
          items:
            type: "string"
          example: ["bug", "enhancement"]