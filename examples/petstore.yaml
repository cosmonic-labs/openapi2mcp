openapi: "3.0.0"
info:
  title: "Pet Store API"
  version: "1.0.0"
  description: "A simple pet store API example"
  contact:
    name: "Pet Store Support"
    email: "support@petstore.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "https://api.petstore.com/v1"
    description: "Production server"

paths:
  /pets:
    get:
      summary: "List all pets"
      description: "Retrieve a list of pets from the store"
      operationId: "listPets"
      parameters:
        - name: "limit"
          in: "query"
          description: "Maximum number of pets to return"
          required: false
          schema:
            type: "integer"
            format: "int32"
            minimum: 1
            maximum: 100
            default: 20
        - name: "category"
          in: "query"
          description: "Filter pets by category"
          required: false
          schema:
            type: "string"
            enum: ["dog", "cat", "bird", "fish"]
      responses:
        "200":
          description: "A list of pets"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: "Invalid request parameters"
        "500":
          description: "Internal server error"

    post:
      summary: "Create a pet"
      description: "Add a new pet to the store"
      operationId: "createPet"
      requestBody:
        description: "Pet data to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetInput"
      responses:
        "201":
          description: "Pet created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: "Invalid pet data"
        "409":
          description: "Pet already exists"

  /pets/{petId}:
    get:
      summary: "Get pet by ID"
      description: "Retrieve a specific pet by its ID"
      operationId: "getPetById"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of the pet to retrieve"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Pet details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: "Pet not found"
        "400":
          description: "Invalid pet ID"

    put:
      summary: "Update pet"
      description: "Update an existing pet's information"
      operationId: "updatePet"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of the pet to update"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "Updated pet data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetInput"
      responses:
        "200":
          description: "Pet updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: "Pet not found"
        "400":
          description: "Invalid pet data"

    delete:
      summary: "Delete pet"
      description: "Remove a pet from the store"
      operationId: "deletePet"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of the pet to delete"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "204":
          description: "Pet deleted successfully"
        "404":
          description: "Pet not found"
        "400":
          description: "Invalid pet ID"

components:
  schemas:
    Pet:
      type: "object"
      required:
        - "id"
        - "name"
        - "category"
      properties:
        id:
          type: "integer"
          format: "int64"
          description: "Unique identifier for the pet"
          example: 123
        name:
          type: "string"
          description: "Name of the pet"
          example: "Fluffy"
          minLength: 1
          maxLength: 50
        category:
          type: "string"
          description: "Category of the pet"
          enum: ["dog", "cat", "bird", "fish"]
          example: "cat"
        breed:
          type: "string"
          description: "Breed of the pet"
          example: "Persian"
          maxLength: 100
        age:
          type: "integer"
          description: "Age of the pet in years"
          minimum: 0
          maximum: 30
          example: 3
        weight:
          type: "number"
          format: "float"
          description: "Weight of the pet in kg"
          minimum: 0.1
          example: 4.2
        vaccinated:
          type: "boolean"
          description: "Whether the pet is vaccinated"
          example: true
        tags:
          type: "array"
          description: "Tags associated with the pet"
          items:
            type: "string"
          example: ["friendly", "indoor"]

    PetInput:
      type: "object"
      required:
        - "name"
        - "category"
      properties:
        name:
          type: "string"
          description: "Name of the pet"
          example: "Fluffy"
          minLength: 1
          maxLength: 50
        category:
          type: "string"
          description: "Category of the pet"
          enum: ["dog", "cat", "bird", "fish"]
          example: "cat"
        breed:
          type: "string"
          description: "Breed of the pet"
          example: "Persian"
          maxLength: 100
        age:
          type: "integer"
          description: "Age of the pet in years"
          minimum: 0
          maximum: 30
          example: 3
        weight:
          type: "number"
          format: "float"
          description: "Weight of the pet in kg"
          minimum: 0.1
          example: 4.2
        vaccinated:
          type: "boolean"
          description: "Whether the pet is vaccinated"
          example: true
        tags:
          type: "array"
          description: "Tags associated with the pet"
          items:
            type: "string"
          example: ["friendly", "indoor"]