openapi: "3.0.0"
info:
  title: "E-commerce API"
  version: "2.1.0"
  description: "Comprehensive e-commerce API for managing products, orders, and customers"
  contact:
    name: "E-commerce API Support"
    email: "api-support@ecommerce.com"
    url: "https://ecommerce.com/support"

servers:
  - url: "https://api.ecommerce.com/v2"
    description: "Production server"
  - url: "https://staging-api.ecommerce.com/v2"
    description: "Staging server"

security:
  - apiKey: []
  - oauth2: ["read", "write"]

paths:
  /products:
    get:
      summary: "List products"
      description: "Retrieve a paginated list of products with filtering options"
      operationId: "listProducts"
      parameters:
        - name: "category"
          in: "query"
          description: "Filter by product category"
          required: false
          schema:
            type: "string"
            example: "electronics"
        - name: "min_price"
          in: "query"
          description: "Minimum price filter"
          required: false
          schema:
            type: "number"
            format: "float"
            minimum: 0
            example: 10.00
        - name: "max_price"
          in: "query"
          description: "Maximum price filter"
          required: false
          schema:
            type: "number"
            format: "float"
            minimum: 0
            example: 1000.00
        - name: "in_stock"
          in: "query"
          description: "Filter by stock availability"
          required: false
          schema:
            type: "boolean"
            default: true
        - name: "sort"
          in: "query"
          description: "Sort order"
          required: false
          schema:
            type: "string"
            enum: ["price_asc", "price_desc", "name_asc", "name_desc", "created_asc", "created_desc"]
            default: "created_desc"
        - name: "page"
          in: "query"
          description: "Page number (1-based)"
          required: false
          schema:
            type: "integer"
            minimum: 1
            default: 1
        - name: "limit"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: "List of products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  products:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Product"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: "Invalid parameters"

    post:
      summary: "Create product"
      description: "Create a new product in the catalog"
      operationId: "createProduct"
      security:
        - apiKey: []
        - oauth2: ["write"]
      requestBody:
        description: "Product information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRequest"
      responses:
        "201":
          description: "Product created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "Invalid product data"
        "401":
          description: "Authentication required"
        "403":
          description: "Insufficient permissions"

  /products/{productId}:
    get:
      summary: "Get product by ID"
      description: "Retrieve detailed information about a specific product"
      operationId: "getProduct"
      parameters:
        - name: "productId"
          in: "path"
          description: "Unique product identifier"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: "Product details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: "Product not found"

    put:
      summary: "Update product"
      description: "Update an existing product"
      operationId: "updateProduct"
      security:
        - apiKey: []
        - oauth2: ["write"]
      parameters:
        - name: "productId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        description: "Updated product information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductRequest"
      responses:
        "200":
          description: "Product updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: "Product not found"

    delete:
      summary: "Delete product"
      description: "Remove a product from the catalog"
      operationId: "deleteProduct"
      security:
        - apiKey: []
        - oauth2: ["write"]
      parameters:
        - name: "productId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "204":
          description: "Product deleted successfully"
        "404":
          description: "Product not found"

  /customers/{customerId}/orders:
    get:
      summary: "Get customer orders"
      description: "Retrieve order history for a specific customer"
      operationId: "getCustomerOrders"
      parameters:
        - name: "customerId"
          in: "path"
          description: "Customer ID"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "status"
          in: "query"
          description: "Filter by order status"
          required: false
          schema:
            type: "string"
            enum: ["pending", "processing", "shipped", "delivered", "cancelled"]
        - name: "date_from"
          in: "query"
          schema:
            type: "string"
            format: "date"
        - name: "date_to"
          in: "query"
          schema:
            type: "string"
            format: "date"
      responses:
        "200":
          description: "Customer orders"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"

    post:
      summary: "Create order"
      description: "Create a new order for a customer"
      operationId: "createOrder"
      parameters:
        - name: "customerId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        description: "Order details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "201":
          description: "Order created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid order data"

  /orders/{orderId}/status:
    patch:
      summary: "Update order status"
      description: "Update the status of an existing order"
      operationId: "updateOrderStatus"
      security:
        - apiKey: []
        - oauth2: ["write"]
      parameters:
        - name: "orderId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        description: "New order status"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "status"
              properties:
                status:
                  type: "string"
                  enum: ["pending", "processing", "shipped", "delivered", "cancelled"]
                tracking_number:
                  type: "string"
                  description: "Tracking number (required when status is 'shipped')"
                notes:
                  type: "string"
                  description: "Additional notes about the status change"
      responses:
        "200":
          description: "Order status updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

components:
  securitySchemes:
    apiKey:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
      description: "API key for authentication"
    
    oauth2:
      type: "oauth2"
      flows:
        authorizationCode:
          authorizationUrl: "https://auth.ecommerce.com/oauth/authorize"
          tokenUrl: "https://auth.ecommerce.com/oauth/token"
          scopes:
            read: "Read access to resources"
            write: "Write access to resources"

  schemas:
    Product:
      type: "object"
      required:
        - "id"
        - "name"
        - "price"
        - "category"
      properties:
        id:
          type: "string"
          format: "uuid"
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: "string"
          example: "Wireless Bluetooth Headphones"
          maxLength: 200
        description:
          type: "string"
          example: "High-quality wireless headphones with noise cancellation"
          maxLength: 1000
        price:
          type: "number"
          format: "float"
          example: 199.99
          minimum: 0
        category:
          type: "string"
          example: "electronics"
        brand:
          type: "string"
          example: "TechBrand"
        sku:
          type: "string"
          example: "TB-WBH-001"
          pattern: "^[A-Z0-9-]+$"
        stock_quantity:
          type: "integer"
          example: 50
          minimum: 0
        images:
          type: "array"
          items:
            type: "string"
            format: "uri"
          example: ["https://images.ecommerce.com/products/123/main.jpg"]
        attributes:
          type: "object"
          properties:
            color:
              type: "string"
              example: "Black"
            weight:
              type: "string"
              example: "250g"
            dimensions:
              type: "string"
              example: "20x15x8 cm"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"

    CreateProductRequest:
      type: "object"
      required:
        - "name"
        - "price"
        - "category"
        - "sku"
      properties:
        name:
          type: "string"
          maxLength: 200
        description:
          type: "string"
          maxLength: 1000
        price:
          type: "number"
          format: "float"
          minimum: 0
        category:
          type: "string"
        brand:
          type: "string"
        sku:
          type: "string"
          pattern: "^[A-Z0-9-]+$"
        stock_quantity:
          type: "integer"
          minimum: 0
          default: 0
        images:
          type: "array"
          items:
            type: "string"
            format: "uri"
        attributes:
          type: "object"
          additionalProperties:
            type: "string"

    UpdateProductRequest:
      type: "object"
      properties:
        name:
          type: "string"
          maxLength: 200
        description:
          type: "string"
          maxLength: 1000
        price:
          type: "number"
          format: "float"
          minimum: 0
        category:
          type: "string"
        brand:
          type: "string"
        stock_quantity:
          type: "integer"
          minimum: 0
        images:
          type: "array"
          items:
            type: "string"
            format: "uri"
        attributes:
          type: "object"
          additionalProperties:
            type: "string"

    Order:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        customer_id:
          type: "string"
          format: "uuid"
        status:
          type: "string"
          enum: ["pending", "processing", "shipped", "delivered", "cancelled"]
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderItem"
        subtotal:
          type: "number"
          format: "float"
          example: 199.99
        tax:
          type: "number"
          format: "float"
          example: 20.00
        shipping:
          type: "number"
          format: "float"
          example: 9.99
        total:
          type: "number"
          format: "float"
          example: 229.98
        shipping_address:
          $ref: "#/components/schemas/Address"
        billing_address:
          $ref: "#/components/schemas/Address"
        tracking_number:
          type: "string"
          example: "1Z999AA1234567890"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"

    OrderItem:
      type: "object"
      properties:
        product_id:
          type: "string"
          format: "uuid"
        product_name:
          type: "string"
        quantity:
          type: "integer"
          minimum: 1
        unit_price:
          type: "number"
          format: "float"
        total_price:
          type: "number"
          format: "float"

    CreateOrderRequest:
      type: "object"
      required:
        - "items"
        - "shipping_address"
      properties:
        items:
          type: "array"
          items:
            type: "object"
            required:
              - "product_id"
              - "quantity"
            properties:
              product_id:
                type: "string"
                format: "uuid"
              quantity:
                type: "integer"
                minimum: 1
        shipping_address:
          $ref: "#/components/schemas/Address"
        billing_address:
          $ref: "#/components/schemas/Address"
        notes:
          type: "string"
          maxLength: 500

    Address:
      type: "object"
      required:
        - "street"
        - "city"
        - "postal_code"
        - "country"
      properties:
        street:
          type: "string"
          example: "123 Main Street"
        city:
          type: "string"
          example: "Anytown"
        state:
          type: "string"
          example: "CA"
        postal_code:
          type: "string"
          example: "12345"
        country:
          type: "string"
          example: "US"
          pattern: "^[A-Z]{2}$"

    Pagination:
      type: "object"
      properties:
        page:
          type: "integer"
          example: 1
        limit:
          type: "integer"
          example: 20
        total_items:
          type: "integer"
          example: 150
        total_pages:
          type: "integer"
          example: 8
        has_next:
          type: "boolean"
          example: true
        has_prev:
          type: "boolean"
          example: false